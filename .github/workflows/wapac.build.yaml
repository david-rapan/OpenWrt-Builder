name: Build OpenWrt for specific target and release

on:
  workflow_dispatch:
  push:
  schedule:
    - cron: "0 */2 * * *"

env:
  REMOTE_REPOSITORY: david-rapan/openwrt
  REMOTE_BRANCH: main
  REMOTE_BRANCH_ENCODED: main
  CONFIG_FILE: wapac.config
  PROFILE_NAME: mikrotik_wapac
  RELEASE_PREFIX: mikrotik-6.x-wifi

jobs:
  check_commits:
    name: Check for new commits
    runs-on: ubuntu-latest
    outputs:
      new_commits: ${{ steps.check_new_commits.outputs.new_commits }}
      latest_commit_sha: ${{ steps.check_new_commits.outputs.latest_commit_sha }}
    steps:
      - name: Check for new commits
        id: check_new_commits
        run: |
          latest_commit_sha=$(curl -sL "https://api.github.com/repos/${{ env.REMOTE_REPOSITORY }}/commits?sha=${{ env.REMOTE_BRANCH_ENCODED }}&per_page=1" | jq -r '.[0].sha')
          last_built_commit_sha=$(curl -sL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.body' | grep -oP 'Build Commit: \K\w+' || echo '')
          echo "new_commits=$([[ "$latest_commit_sha" != "$last_built_commit_sha" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "latest_commit_sha=$latest_commit_sha" >> $GITHUB_OUTPUT

  build:
    name: Build OpenWrt
    needs: check_commits
    if: needs.check_commits.outputs.new_commits == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential clang flex bison g++ gawk gcc-multilib \
            g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget
      - name: Checkout remote repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: "custom_repo"
      - name: Cache 
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'
          prefix: ${{ github.workspace }}
      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          mv custom_repo/patches/989-reflector-ignore-statically-set-ips.patch feeds/packages/libs/avahi/patches/989-reflector-ignore-statically-set-ips.patch
          mv custom_repo/patches/990-avahi-reflector-disable-nsec.patch feeds/packages/libs/avahi/patches/990-avahi-reflector-disable-nsec.patch
          mv custom_repo/patches/990-curl-fix-quic-check.patch feeds/packages/net/curl/patches/990-curl-fix-quic-check.patch
          sed -i 's/--with-openssl="$(STAGING_DIR)\/usr"/--with-openssl="$(STAGING_DIR)\/usr" --with-openssl-quic/g' feeds/packages/net/curl/Makefile
          sed -i 's/-$(PKG_RELEASE)/-r$(PKG_RELEASE)/g' feeds/packages/net/knot/Makefile
          ./scripts/feeds install -a
      - name: Configure firmware image
        run: |
          mv custom_repo/${{ env.CONFIG_FILE }} .config
          make defconfig -j$(nproc)
      - name: Build the firmware image
        run: make download world V=sc -j$(nproc)
      - name: Package output
        run: tar -cvf ipq40xx-images.tar bin/targets/ipq40xx/mikrotik
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipq40x-images
          path: ipq40xx-images.tar

  release:
    name: Create release
    needs: [build, check_commits]
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ipq40x-images
      - name: Extract artifacts
        run: tar xf ipq40xx-images.tar
      - name: Get current date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV
      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          files: bin/targets/ipq40xx/mikrotik/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}
          name: Updated prebuilt images ${{ env.RELEASE_DATE }}
          body: |
            Updated prebuilt images for ${{ env.RELEASE_DATE }}
            Build Commit: ${{ needs.check_commits.outputs.latest_commit_sha }}
      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 2
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
